@page "/program/list"
@using Microsoft.AspNetCore.Authorization;
@using ReimbursementPoC.Blazor.UI.Model;
@inject HttpClient Http
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = "Admin")]
<h1>Program List</h1>
<p>Blazor CRUD operation</p>
<hr />

<div class="row">
    <div class="col-md-6">
        <a href='/program/add' class="btn btn-primary" role="button">
            <i class="fas fa-user-plus"></i>
            Add Program
        </a>
    </div>
    @*<div class="input-group col">
        <input type="text" class="form-control" placeholder="Search user by name"
               @bind="SearchString" @bind:event="oninput" @onkeyup="FilterUser" />
        @if (SearchString.Length > 0)
        {
            <div class="input-group-append">
                <button class="btn btn-danger" @onclick="ResetSearch">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        }
    </div>*@
</div>
<br />

@if (programList == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped align-middle table-bordered">
        <thead class="table-success">
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>StartDate</th>
                <th>EndDate</th>
                <th>State</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in programList)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Description</td>
                    <td>@item.StartDate</td>
                    <td>@item.EndDate</td>
                    <td>@item.State</td>
                    <td>
                        <a href='/program/edit/@item.Id' class="btn btn-outline-dark" role="button">
                            Edit
                        </a>
                        <a href='/program/delete/@item.Id' class="btn btn-outline-danger" role="button">
                            Delete
                        </a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    protected List<ProgramEntityItem> programList = new();
    //protected List<User> searchUserData = new();
    //protected User user = new();
    //protected string SearchString { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await GetUser();
    }

    protected async Task GetUser()
    {
        var result = await Http.GetFromJsonAsync<ProgramEntity>("/program/api/programs");
        programList = result.Items.ToList();
        // searchUserData = programList;
    }

    //protected void FilterUser()
    //{
    //    if (!string.IsNullOrEmpty(SearchString))
    //    {
    //        programList = searchUserData
    //            .Where(x => x.Username.IndexOf(SearchString, StringComparison.OrdinalIgnoreCase) != -1)
    //            .ToList();
    //    }
    //    else
    //    {
    //        programList = searchUserData;
    //    }
    //}

    //protected void DeleteConfirm(int userID)
    //{
    //    user = programList.FirstOrDefault(x => x.Userid == userID);
    //}

    //public void ResetSearch()
    //{
    //    SearchString = string.Empty;
    //    programList = searchUserData;
    //}

}